import { VirtualKey } from '~/shared/defs/virtualKeys';

export enum LogicalKey {
  LK_NONE = 0,
  LK_A = 1,
  LK_B,
  LK_C,
  LK_D,
  LK_E,
  LK_F,
  LK_G,
  LK_H,
  LK_I,
  LK_J,
  LK_K,
  LK_L,
  LK_M,
  LK_N,
  LK_O,
  LK_P,
  LK_Q,
  LK_R,
  LK_S,
  LK_T,
  LK_U,
  LK_V,
  LK_W,
  LK_X,
  LK_Y,
  LK_Z,
  LK_Num_0,
  LK_Num_1,
  LK_Num_2,
  LK_Num_3,
  LK_Num_4,
  LK_Num_5,
  LK_Num_6,
  LK_Num_7,
  LK_Num_8,
  LK_Num_9,
  LK_Escape,
  LK_Space,
  LK_Enter,
  LK_Tab,
  LK_BackSpace,
  LK_F1,
  LK_F2,
  LK_F3,
  LK_F4,
  LK_F5,
  LK_F6,
  LK_F7,
  LK_F8,
  LK_F9,
  LK_F10,
  LK_F11,
  LK_F12,
  LK_Dot,
  LK_Comma,
  LK_Exclamation,
  LK_Question,
  LK_Colon,
  LK_Semicolon,
  LK_Underscore,
  LK_Plus,
  LK_Minus,
  LK_Asterisk,
  LK_Slash,
  LK_Equal,
  LK_Ampersand,
  LK_VerticalBar,
  LK_Hat,
  LK_Tilde,
  LK_AtMark,
  LK_Sharp,
  LK_Dollar,
  LK_Yen,
  LK_Percent,
  LK_BackSlash,
  LK_SingleQuote,
  LK_DoubleQuote,
  LK_BackQuote,
  LK_LeftParenthesis,
  LK_RightParenthesis,
  LK_LeftSquareBracket,
  LK_RightSquareBracket,
  LK_LeftCurlyBrace,
  LK_RightCurlyBrace,
  LK_LessThan,
  LK_GreaterThan,
  LK_Ctrl,
  LK_Shift,
  LK_Alt,
  LK_Gui,
  LK_Home,
  LK_End,
  LK_Insert,
  LK_Delete,
  LK_PageUp,
  LK_PageDn,
  LK_LeftArrow,
  LK_RightArrow,
  LK_UpArrow,
  LK_DownArrow,
  LK_PrintScreen,
  LK_CapsLock,
  LK_ScrollLock,
  LK_PauseBreak,
  LK_Menu,
  LK_HankakuZenkaku,
  LK_KatakanaHiragana,
  LK_Muhenkan,
  LK_Henkan,
  LK_Special_0,
  LK_Special_1,
  LK_Special_2,
  LK_Special_3,
  LK_Special_4,
  LK_Special_5,
  LK_Special_6,
  LK_Special_7,
  LK_Special_8,
  LK_Special_9,
  LK_Special_10,
  LK_Special_11,
  LK_Special_12,
  LK_Special_13,
  LK_Special_14,
  LK_Special_15,
  LK_F13,
  LK_F14,
  LK_F15,
  LK_F16,
  LK_F17,
  LK_F18,
  LK_F19,
  LK_F20,
  LK_F21,
  LK_F22,
  LK_F23,
  LK_F24,
  LK_NumPad_0,
  LK_NumPad_1,
  LK_NumPad_2,
  LK_NumPad_3,
  LK_NumPad_4,
  LK_NumPad_5,
  LK_NumPad_6,
  LK_NumPad_7,
  LK_NumPad_8,
  LK_NumPad_9,
  LK_NumPad_Dot,
  LK_NumPad_Plus,
  LK_NumPad_Minus,
  LK_NumPad_Asterisk,
  LK_NumPad_Slash,
  LK_NumPad_Equal,
  LK_NumPad_Enter,
  LK_NumPad_BackSpace,
  LK_NumPad_00,
  LK_NumLock,
  LK_LCtrl,
  LK_LShift,
  LK_LAlt,
  LK_LGui,
  LK_RCtrl,
  LK_RShift,
  LK_RAlt,
  LK_RGui,
  LK_NN,
  LK_LTU,
  LK_UU,
  LK_NextDouble,
  LK_PostDouble,
  LK_U0,
  LK_U1,
  LK_U2,
  LK_U3,
  LK_U4,
  LK_U5,
  LK_U6,
  LK_U7,
  LK_U8,
  LK_U9,
  LK_RoutingSource_Any,
  LK_RoutingDestination_Keep,
  LK_Lang1Kana,
  LK_Lang2Eisu,
}

const virtualKeyToLogicalKeyMappingTable: {
  [key in VirtualKey]: number;
} = {
  K_NONE: LogicalKey.LK_NONE,
  K_A: LogicalKey.LK_A,
  K_B: LogicalKey.LK_B,
  K_C: LogicalKey.LK_C,
  K_D: LogicalKey.LK_D,
  K_E: LogicalKey.LK_E,
  K_F: LogicalKey.LK_F,
  K_G: LogicalKey.LK_G,
  K_H: LogicalKey.LK_H,
  K_I: LogicalKey.LK_I,
  K_J: LogicalKey.LK_J,
  K_K: LogicalKey.LK_K,
  K_L: LogicalKey.LK_L,
  K_M: LogicalKey.LK_M,
  K_N: LogicalKey.LK_N,
  K_O: LogicalKey.LK_O,
  K_P: LogicalKey.LK_P,
  K_Q: LogicalKey.LK_Q,
  K_R: LogicalKey.LK_R,
  K_S: LogicalKey.LK_S,
  K_T: LogicalKey.LK_T,
  K_U: LogicalKey.LK_U,
  K_V: LogicalKey.LK_V,
  K_W: LogicalKey.LK_W,
  K_X: LogicalKey.LK_X,
  K_Y: LogicalKey.LK_Y,
  K_Z: LogicalKey.LK_Z,
  K_Num_0: LogicalKey.LK_Num_0,
  K_Num_1: LogicalKey.LK_Num_1,
  K_Num_2: LogicalKey.LK_Num_2,
  K_Num_3: LogicalKey.LK_Num_3,
  K_Num_4: LogicalKey.LK_Num_4,
  K_Num_5: LogicalKey.LK_Num_5,
  K_Num_6: LogicalKey.LK_Num_6,
  K_Num_7: LogicalKey.LK_Num_7,
  K_Num_8: LogicalKey.LK_Num_8,
  K_Num_9: LogicalKey.LK_Num_9,
  K_Escape: LogicalKey.LK_Escape,
  K_Space: LogicalKey.LK_Space,
  K_Enter: LogicalKey.LK_Enter,
  K_Tab: LogicalKey.LK_Tab,
  K_BackSpace: LogicalKey.LK_BackSpace,
  K_F1: LogicalKey.LK_F1,
  K_F2: LogicalKey.LK_F2,
  K_F3: LogicalKey.LK_F3,
  K_F4: LogicalKey.LK_F4,
  K_F5: LogicalKey.LK_F5,
  K_F6: LogicalKey.LK_F6,
  K_F7: LogicalKey.LK_F7,
  K_F8: LogicalKey.LK_F8,
  K_F9: LogicalKey.LK_F9,
  K_F10: LogicalKey.LK_F10,
  K_F11: LogicalKey.LK_F11,
  K_F12: LogicalKey.LK_F12,
  K_Dot: LogicalKey.LK_Dot,
  K_Comma: LogicalKey.LK_Comma,
  K_Exclamation: LogicalKey.LK_Exclamation,
  K_Question: LogicalKey.LK_Question,
  K_Colon: LogicalKey.LK_Colon,
  K_Semicolon: LogicalKey.LK_Semicolon,
  K_Underscore: LogicalKey.LK_Underscore,
  K_Plus: LogicalKey.LK_Plus,
  K_Minus: LogicalKey.LK_Minus,
  K_Asterisk: LogicalKey.LK_Asterisk,
  K_Slash: LogicalKey.LK_Slash,
  K_Equal: LogicalKey.LK_Equal,
  K_Ampersand: LogicalKey.LK_Ampersand,
  K_VerticalBar: LogicalKey.LK_VerticalBar,
  K_Hat: LogicalKey.LK_Hat,
  K_Tilde: LogicalKey.LK_Tilde,
  K_AtMark: LogicalKey.LK_AtMark,
  K_Sharp: LogicalKey.LK_Sharp,
  K_Dollar: LogicalKey.LK_Dollar,
  K_Yen: LogicalKey.LK_Yen,
  K_Percent: LogicalKey.LK_Percent,
  K_BackSlash: LogicalKey.LK_BackSlash,
  K_SingleQuote: LogicalKey.LK_SingleQuote,
  K_DoubleQuote: LogicalKey.LK_DoubleQuote,
  K_BackQuote: LogicalKey.LK_BackQuote,
  K_LeftParenthesis: LogicalKey.LK_LeftParenthesis,
  K_RightParenthesis: LogicalKey.LK_RightParenthesis,
  K_LeftSquareBracket: LogicalKey.LK_LeftSquareBracket,
  K_RightSquareBracket: LogicalKey.LK_RightSquareBracket,
  K_LeftCurlyBrace: LogicalKey.LK_LeftCurlyBrace,
  K_RightCurlyBrace: LogicalKey.LK_RightCurlyBrace,
  K_LessThan: LogicalKey.LK_LessThan,
  K_GreaterThan: LogicalKey.LK_GreaterThan,
  K_Shift: LogicalKey.LK_Shift,
  K_Ctrl: LogicalKey.LK_Ctrl,
  K_Alt: LogicalKey.LK_Alt,
  K_Gui: LogicalKey.LK_Gui,
  K_Home: LogicalKey.LK_Home,
  K_End: LogicalKey.LK_End,
  K_Insert: LogicalKey.LK_Insert,
  K_Delete: LogicalKey.LK_Delete,
  K_PageUp: LogicalKey.LK_PageUp,
  K_PageDn: LogicalKey.LK_PageDn,
  K_LeftArrow: LogicalKey.LK_LeftArrow,
  K_RightArrow: LogicalKey.LK_RightArrow,
  K_UpArrow: LogicalKey.LK_UpArrow,
  K_DownArrow: LogicalKey.LK_DownArrow,
  K_PrintScreen: LogicalKey.LK_PrintScreen,
  K_CapsLock: LogicalKey.LK_CapsLock,
  K_ScrollLock: LogicalKey.LK_ScrollLock,
  K_PauseBreak: LogicalKey.LK_PauseBreak,
  K_Menu: LogicalKey.LK_Menu,
  K_HankakuZenkaku: LogicalKey.LK_HankakuZenkaku,
  K_KatakanaHiragana: LogicalKey.LK_KatakanaHiragana,
  K_Muhenkan: LogicalKey.LK_Muhenkan,
  K_Henkan: LogicalKey.LK_Henkan,
  K_Special_0: LogicalKey.LK_Special_0,
  K_Special_1: LogicalKey.LK_Special_1,
  K_Special_2: LogicalKey.LK_Special_2,
  K_Special_3: LogicalKey.LK_Special_3,
  K_Special_4: LogicalKey.LK_Special_4,
  K_Special_5: LogicalKey.LK_Special_5,
  K_Special_6: LogicalKey.LK_Special_6,
  K_Special_7: LogicalKey.LK_Special_7,
  K_Special_8: LogicalKey.LK_Special_8,
  K_Special_9: LogicalKey.LK_Special_9,
  K_Special_10: LogicalKey.LK_Special_10,
  K_Special_11: LogicalKey.LK_Special_11,
  K_Special_12: LogicalKey.LK_Special_12,
  K_Special_13: LogicalKey.LK_Special_13,
  K_Special_14: LogicalKey.LK_Special_14,
  K_Special_15: LogicalKey.LK_Special_15,
  K_F13: LogicalKey.LK_F13,
  K_F14: LogicalKey.LK_F14,
  K_F15: LogicalKey.LK_F15,
  K_F16: LogicalKey.LK_F16,
  K_F17: LogicalKey.LK_F17,
  K_F18: LogicalKey.LK_F18,
  K_F19: LogicalKey.LK_F19,
  K_F20: LogicalKey.LK_F20,
  K_F21: LogicalKey.LK_F21,
  K_F22: LogicalKey.LK_F22,
  K_F23: LogicalKey.LK_F23,
  K_F24: LogicalKey.LK_F24,
  K_NumPad_0: LogicalKey.LK_NumPad_0,
  K_NumPad_1: LogicalKey.LK_NumPad_1,
  K_NumPad_2: LogicalKey.LK_NumPad_2,
  K_NumPad_3: LogicalKey.LK_NumPad_3,
  K_NumPad_4: LogicalKey.LK_NumPad_4,
  K_NumPad_5: LogicalKey.LK_NumPad_5,
  K_NumPad_6: LogicalKey.LK_NumPad_6,
  K_NumPad_7: LogicalKey.LK_NumPad_7,
  K_NumPad_8: LogicalKey.LK_NumPad_8,
  K_NumPad_9: LogicalKey.LK_NumPad_9,
  K_NumPad_Dot: LogicalKey.LK_NumPad_Dot,
  K_NumPad_Plus: LogicalKey.LK_NumPad_Plus,
  K_NumPad_Minus: LogicalKey.LK_NumPad_Minus,
  K_NumPad_Asterisk: LogicalKey.LK_NumPad_Asterisk,
  K_NumPad_Slash: LogicalKey.LK_NumPad_Slash,
  K_NumPad_Equal: LogicalKey.LK_NumPad_Equal,
  K_NumPad_Enter: LogicalKey.LK_NumPad_Enter,
  K_NumPad_BackSpace: LogicalKey.LK_NumPad_BackSpace,
  K_NumPad_00: LogicalKey.LK_NumPad_00,
  K_NumLock: LogicalKey.LK_NumLock,
  K_LShift: LogicalKey.LK_LShift,
  K_LCtrl: LogicalKey.LK_LCtrl,
  K_LAlt: LogicalKey.LK_LAlt,
  K_LGui: LogicalKey.LK_LGui,
  K_RShift: LogicalKey.LK_RShift,
  K_RCtrl: LogicalKey.LK_RCtrl,
  K_RAlt: LogicalKey.LK_RAlt,
  K_RGui: LogicalKey.LK_RGui,
  K_NN: LogicalKey.LK_NN,
  K_LTU: LogicalKey.LK_LTU,
  K_UU: LogicalKey.LK_UU,
  K_NextDouble: LogicalKey.LK_NextDouble,
  K_PostDouble: LogicalKey.LK_PostDouble,
  K_U0: LogicalKey.LK_U0,
  K_U1: LogicalKey.LK_U1,
  K_U2: LogicalKey.LK_U2,
  K_U3: LogicalKey.LK_U3,
  K_U4: LogicalKey.LK_U4,
  K_U5: LogicalKey.LK_U5,
  K_U6: LogicalKey.LK_U6,
  K_U7: LogicalKey.LK_U7,
  K_U8: LogicalKey.LK_U8,
  K_U9: LogicalKey.LK_U9,
  K_RoutingSource_Any: LogicalKey.LK_RoutingSource_Any,
  K_RoutingDestination_Keep: LogicalKey.LK_RoutingDestination_Keep,
  K_Lang1Kana: LogicalKey.LK_Lang1Kana,
  K_Lang2Eisu: LogicalKey.LK_Lang2Eisu,
};

export function getLogicalKeyForVirtualKey(virtualKey: VirtualKey): number {
  return virtualKeyToLogicalKeyMappingTable[virtualKey] || LogicalKey.LK_NONE;
}
